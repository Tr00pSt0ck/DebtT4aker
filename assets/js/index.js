document.addEventListener('DOMContentLoaded', function() { setTimeout(function() { document.querySelector('.loading-screen').style.opacity='0'; setTimeout(function() { document.querySelector('.loading-screen').style.display='none'; }, 500); }, 2000); let debts=JSON.parse(localStorage.getItem('debts'))||[]; let deferredPrompt; let debtToDelete=null; let debtToMark=null; let currentFilter='all'; let spendingChart=null; let currentGraphRange='6'; const debtForm=document.getElementById('debtForm'); const debtsContainer=document.getElementById('debtsContainer'); const installBanner=document.getElementById('installBanner'); const installButton=document.getElementById('installButton'); const closeBanner=document.getElementById('closeBanner'); const formToggle=document.getElementById('formToggle'); const debtFormContainer=document.getElementById('debtFormContainer'); const toggleIcon=formToggle.querySelector('.toggle-icon'); const deleteModal=document.getElementById('deleteModal'); const confirmDelete=document.getElementById('confirmDelete'); const cancelDelete=document.getElementById('cancelDelete'); const paidModal=document.getElementById('paidModal'); const confirmPaid=document.getElementById('confirmPaid'); const cancelPaid=document.getElementById('cancelPaid'); const unpaidModal=document.getElementById('unpaidModal'); const confirmUnpaid=document.getElementById('confirmUnpaid'); const cancelUnpaid=document.getElementById('cancelUnpaid'); const viewOptions=document.querySelectorAll('.view-option'); const graphOptions=document.querySelectorAll('.graph-option'); formToggle.addEventListener('click', function() { debtFormContainer.classList.toggle('expanded'); toggleIcon.classList.toggle('collapsed'); toggleIcon.classList.toggle('expanded'); }); viewOptions.forEach(option => { option.addEventListener('click', function() { viewOptions.forEach(opt => opt.classList.remove('active')); this.classList.add('active'); currentFilter=this.getAttribute('data-filter'); renderDebts(); }); }); graphOptions.forEach(option => { option.addEventListener('click', function() { graphOptions.forEach(opt => opt.classList.remove('active')); this.classList.add('active'); currentGraphRange=this.getAttribute('data-graph'); renderChart(); }); }); function renderDebts() { let filteredDebts=debts; if (currentFilter==='paid') { filteredDebts=debts.filter(debt => debt.paid); } else if (currentFilter==='unpaid') { filteredDebts=debts.filter(debt =>!debt.paid); } if (filteredDebts.length===0) { let message=''; if (currentFilter==='all') { message='No debts recorded. Add a debt using the form above to get started.'; } else if (currentFilter==='paid') { message='You haven\'t marked any debts as paid yet.'; } else { message='You don\'t have any unpaid debts. Great job!'; } debtsContainer.innerHTML=`<div class="empty-state"><i class="fas fa-clipboard-list"></i><h3>No Debts</h3><p>${message}</p></div>`; updateStats(); renderChart(); return; } debtsContainer.innerHTML=''; filteredDebts.forEach((debt, index) => { const originalIndex=debts.findIndex(d => d.id===debt.id); const debtElement=document.createElement('div'); debtElement.className=`debt-card ${debt.paid?'paid':''}`; const debtDate=new Date(debt.date); const formattedDate=debtDate.toLocaleDateString('en-GB', { day:'2-digit', month:'short', year:'numeric' }); let paidDateHtml=''; if (debt.paid&&debt.paidDate) { const paidDate=new Date(debt.paidDate); const formattedPaidDate=paidDate.toLocaleDateString('en-GB', { day:'2-digit', month:'short', year:'numeric' }); paidDateHtml=`<div class="debt-paid-date"><i class="fas fa-check-circle"></i>Paid on ${formattedPaidDate}</div>`; } debtElement.innerHTML=`<div class="debt-status ${debt.paid?'status-paid':'status-unpaid'}">${debt.paid?'Paid':'Unpaid'}</div><div class="debt-card-header"><div class="debt-name">${debt.name}</div><div class="debt-amount">£${parseFloat(debt.amount).toFixed(2)}</div></div>${debt.description?`<div class="debt-description">${debt.description}</div>`:''}<div class="debt-date"><i class="far fa-calendar-alt"></i>Added on ${formattedDate}</div>${paidDateHtml}<div class="debt-actions"><button class="btn-paid">${debt.paid?'Mark as Unpaid':'Mark as Paid'}</button><button class="btn-delete"><i class="fas fa-trash"></i></button></div>`; debtElement.querySelector('.btn-paid').addEventListener('click', () => { if (debt.paid) { showUnpaidModal(originalIndex); } else { showPaidModal(originalIndex); } }); debtElement.querySelector('.btn-delete').addEventListener('click', () => { showDeleteModal(originalIndex); }); debtsContainer.appendChild(debtElement); }); updateStats(); renderChart(); } function updateStats() { const totalDebts=debts.length; const paidDebts=debts.filter(debt => debt.paid).length; const totalAmount=debts.reduce((sum, debt) => sum+parseFloat(debt.amount), 0); const totalLeft=debts.filter(debt =>!debt.paid).reduce((sum, debt) => sum+parseFloat(debt.amount), 0); document.getElementById('totalDebts').textContent=totalDebts; document.getElementById('paidDebts').textContent=paidDebts; document.getElementById('totalLeft').textContent=`£${totalLeft.toFixed(2)}`; } function renderChart() { const ctx=document.getElementById('spendingChart').getContext('2d'); if (spendingChart) { spendingChart.destroy(); } const monthlySpending=calculateMonthlySpending(); const labels=monthlySpending.map(item => item.month); const data=monthlySpending.map(item => item.amount); spendingChart=new Chart(ctx, { type:'bar', data:{ labels:labels, datasets:[{ label:'Amount Paid (£)', data:data, backgroundColor:'rgba(230, 0, 0, 0.7)', borderColor:'rgba(230, 0, 0, 1)', borderWidth:1, borderRadius:5, hoverBackgroundColor:'rgba(230, 0, 0, 0.9)' }] }, options:{ responsive:true, maintainAspectRatio:false, scales:{ y:{ beginAtZero:true, grid:{ color:'rgba(0, 0, 0, 0.05)' } }, x:{ grid:{ display:false } } }, plugins:{ legend:{ display:false } } } }); } function calculateMonthlySpending() { const paidDebts=debts.filter(debt => debt.paid&&debt.paidDate); const monthlyData={}; paidDebts.forEach(debt => { const paidDate=new Date(debt.paidDate); const monthYear=`${paidDate.getFullYear()}-${(paidDate.getMonth()+1).toString().padStart(2, '0')}`; const monthName=paidDate.toLocaleDateString('en-GB', { month:'short', year:'numeric' }); if (!monthlyData[monthYear]) { monthlyData[monthYear]={ month:monthName, amount:0 }; } monthlyData[monthYear].amount += parseFloat(debt.amount); }); let result=Object.values(monthlyData); result.sort((a, b) => { const aDate=new Date(a.month); const bDate=new Date(b.month); return aDate-bDate; }); if (currentGraphRange!=='all') { const months=parseInt(currentGraphRange); const cutoffDate=new Date(); cutoffDate.setMonth(cutoffDate.getMonth()-months); result=result.filter(item => { const itemDate=new Date(item.month); return itemDate>=cutoffDate; }); } return result; } debtForm.addEventListener('submit', function(e) { e.preventDefault(); const name=document.getElementById('debtName').value; const amount=document.getElementById('debtAmount').value; const description=document.getElementById('debtDescription').value; const newDebt={ id:Date.now(), name, amount, description, paid:false, date:new Date().toISOString(), paidDate:null }; debts.push(newDebt); localStorage.setItem('debts', JSON.stringify(debts)); debtForm.reset(); viewOptions.forEach(opt => opt.classList.remove('active')); document.querySelector('[data-filter="all"]').classList.add('active'); currentFilter='all'; renderDebts(); }); function showDeleteModal(index) { debtToDelete=index; deleteModal.style.display='flex'; } function showPaidModal(index) { debtToMark=index; paidModal.style.display='flex'; } function showUnpaidModal(index) { debtToMark=index; unpaidModal.style.display='flex'; } confirmDelete.addEventListener('click', function() { if (debtToDelete!==null) { debts.splice(debtToDelete, 1); localStorage.setItem('debts', JSON.stringify(debts)); renderDebts(); debtToDelete=null; } deleteModal.style.display='none'; }); confirmPaid.addEventListener('click', function() { if (debtToMark!==null) { debts[debtToMark].paid=true; debts[debtToMark].paidDate=new Date().toISOString(); localStorage.setItem('debts', JSON.stringify(debts)); renderDebts(); debtToMark=null; } paidModal.style.display='none'; }); confirmUnpaid.addEventListener('click', function() { if (debtToMark!==null) { debts[debtToMark].paid=false; debts[debtToMark].paidDate=null; localStorage.setItem('debts', JSON.stringify(debts)); renderDebts(); debtToMark=null; } unpaidModal.style.display='none'; }); cancelDelete.addEventListener('click', function() { debtToDelete=null; deleteModal.style.display='none'; }); cancelPaid.addEventListener('click', function() { debtToMark=null; paidModal.style.display='none'; }); cancelUnpaid.addEventListener('click', function() { debtToMark=null; unpaidModal.style.display='none'; }); window.addEventListener('click', function(e) { if (e.target===deleteModal) { debtToDelete=null; deleteModal.style.display='none'; } if (e.target===paidModal) { debtToMark=null; paidModal.style.display='none'; } if (e.target===unpaidModal) { debtToMark=null; unpaidModal.style.display='none'; } }); window.addEventListener('beforeinstallprompt', (e) => { e.preventDefault(); deferredPrompt=e; installBanner.style.display='flex'; }); installButton.addEventListener('click', async () => { if (!deferredPrompt) return; deferredPrompt.prompt(); const { outcome }=await deferredPrompt.userChoice; if (outcome==='accepted') { console.log('User accepted the install prompt'); } else { console.log('User dismissed the install prompt'); } deferredPrompt=null; installBanner.style.display='none'; }); closeBanner.addEventListener('click', () => { installBanner.style.display='none'; }); window.addEventListener('appinstalled', () => { installBanner.style.display='none'; deferredPrompt=null; console.log('PWA was installed'); }); renderDebts(); });